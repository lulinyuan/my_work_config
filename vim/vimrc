let mapleader=";"
filetype off
filetype plugin on 
syntax on
syntax enable
set incsearch " 设置实时搜索功能
set wildmenu " 设置自身命令行补全
set nocompatible
set ruler " 显示光标当前位置
set number
set cursorline " 高亮显示当前行
set cursorcolumn " 高亮显示当前列
set gcr=a:block-blinkon0 " 禁止光标闪烁
set mouse-=a
set tabstop=2
set shiftwidth=2
set expandtab
filetype indent on
set incsearch
set hlsearch
set foldmethod=indent 
set relativenumber number " 相对行号
au FocusLost * :set norelativenumber number
au FocusGained * :set relativenumber
" 插入模式下用绝对行号, 普通模式下用相对
autocmd InsertEnter * :set norelativenumber number

autocmd InsertLeave * :set relativenumber


set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
Plugin 'VundleVim/Vundle.vim'
Plugin 'tpope/vim-repeat' "use . to repeat plugin command
Plugin 'tpope/vim-surround' "ysiw]
Plugin 'kien/ctrlp.vim' "<C-p> to find file
Plugin 'tacahiroy/ctrlp-funky' " <leader>fu  
Plugin 'octol/vim-cpp-enhanced-highlight'
" Plugin 'tpope/vim-commentary' "a motion to comment [gc]
" Plugin 'thinca/vim-quickrun'
Plugin 'tyru/open-browser.vim'
Plugin 'plasticboy/vim-markdown'
Plugin 'DoxygenToolkit.vim'
Plugin 'Raimondi/delimitMate' "auto add {} [] () and so on
Plugin 'Valloric/YouCompleteMe'
Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'ervandew/supertab'
Plugin 'gabrielelana/awesome-terminal-fonts'
Plugin 'vim-airline/vim-airline' "status and tabline 
Plugin 'vim-airline/vim-airline-themes'
Plugin 'Zuckonit/vim-airline-tomato'
Plugin 'vim-scripts/CmdlineCompl.vim'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tomasr/molokai'
Plugin 'gmarik/ingretu'
Plugin 'rainux/vim-desert-warm-256'
Plugin 'scrooloose/nerdtree'
Plugin 'scrooloose/nerdcommenter'
Plugin 'kshenoy/vim-signature'
Plugin 'Yggdroot/hiPairs'
Plugin 'DfrankUtil'
Plugin 'Vimprj'
Plugin 'vim-scripts/indexer.tar.gz'
Plugin 'vim-latex/vim-latex' " latex
call vundle#end()

noremap <Leader>b ^
noremap<Leader>e $
noremap<Leader>a A
imap <C-h> <left>
imap <C-l> <right>
nmap <Leader>q :q<CR>
nmap <Leader>w :w<CR>
nmap <Leader>fs :w<CR>
nmap <Leader>= i<Esc>ggvG=gi<Esc>
noremap <Up> <Nop>
noremap <Down> <Nop>
noremap <Left> <Nop>
noremap <Right> <Nop>
"swift tab
noremap <C-t>n :tabnew<CR>
noremap <C-t>l :tabnext<CR>
noremap <C-t>h :tabprevious<CR>
noremap <C-t>c :tabclose<CR>

" split windows hot key
" <C-w>s  horizontal spliting
" <C-w>v  vertical spliting
" <C-w>q  close one 
" <C-w><C-w> switch between windows
" <C-w>j(Or h, k, l) switch to adjacent window
noremap <C-w>- <C-w>s<CR>
noremap <C-w>\ <C-w>v<CR>

" Buffer swich
noremap <Leader>bn :bn<CR>
noremap <Leader>bb :bn<CR>
noremap <Leader>bp :bp<CR>
noremap <Leader>bpp :b#<CR>

imap fd <Esc>
vmap fd <Esc>
" Visual "{{{
syntax on                      " enable syntax
" set synmaxcol=250              " limit syntax highlighting to 128 columns
set mousehide                 " Hide mouse after chars typed
set nonumber                  " line numbers Off
set showmatch                 " Show matching brackets.
set matchtime=2               " Bracket blinking.
set wildmode=longest,list     " At command line, complete longest common string, then list alternatives.
set completeopt-=preview      " disable auto opening preview window
set novisualbell              " No blinking
set noerrorbells              " No noise.
set vb t_vb=                  " disable any beeps or flashes on error
set laststatus=2              " always show status line.
set shortmess=atI             " shortens messages
set showcmd                   " display an incomplete command in statusline
set statusline=%<%f\          " custom statusline
set stl+=[%{&ff}]             " show fileformat
set stl+=%y%m%r%=
set stl+=%-14.(%l,%c%V%)\ %P
set foldenable                " Turn on folding
"set foldmethod=marker         " Fold on the marker
set foldlevel=100             " Don't autofold anything (but I can still fold manually)
set foldopen=block,hor,tag    " what movements open folds
set foldopen+=percent,mark
set foldopen+=quickfix
set virtualedit=block
set splitbelow
set splitright
set list                      " display unprintable characters f12 - switches
set listchars=tab:\ ·,eol:¬
set listchars+=trail:·
set listchars+=extends:»,precedes:«
map <silent> <F12> :set invlist<CR>
"}}}
" open help in vertical split
" au BufWinEnter {*.txt} if 'help' == &ft | wincmd H | nmap q :q<CR> | endif
" " }}}
nnoremap <leader>rs :source ~/.vimrc<CR>
nnoremap <leader>re :e ~/.vim/vimrc<CR>
nnoremap <leader>rr :e ~/.vim/readme.md<CR>
cnoremap <leader>rc :silent ! cd ~/.dotfiles/ && git commit ~/.dotfiles/vim/vimrc -v <CR>
nnoremap <leader>rp :silent ! cd ~/.dotfiles/ && git push <CR>


nnoremap <C-W>O :call MaximizeToggle()<CR>
nnoremap <C-W>o :call MaximizeToggle()<CR>
nnoremap <C-W><C-O> :call MaximizeToggle()<CR>

function! MaximizeToggle()
  if exists("s:maximize_session")
    exec "source " . s:maximize_session
    call delete(s:maximize_session)
    unlet s:maximize_session
    let &hidden=s:maximize_hidden_save
    unlet s:maximize_hidden_save
  else
    let s:maximize_hidden_save = &hidden
    let s:maximize_session = tempname()
    set hidden
    exec "mksession! " . s:maximize_session
    only
  endif
endfunction
" AutoCommands " 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
au BufRead,BufNewFile {*.go}                                          setl ft=go tabstop=2 softtabstop=2 noexpandtab smarttab
au BufRead,BufNewFile {*.coffee}                                      setl ft=coffee tabstop=2 softtabstop=2 expandtab smarttab
au BufRead,BufNewFile {Gemfile,Rakefile,*.rake,config.ru,*.rabl}      setl ft=ruby tabstop=2 softtabstop=2 shiftwidth=2 expandtab smarttab
au BufRead,BufNewFile {*.local}                                       setl ft=sh
au BufRead,BufNewFile {*.md,*.mkd,*.markdown}                         setl ft=markdown
au BufRead,BufNewFile {*.scala}                                       setl ft=scala
au! BufReadPost       {COMMIT_EDITMSG,*/COMMIT_EDITMSG}               exec 'setl ft=gitcommit noml list spell' | norm 1G
au! BufWritePost      {*.snippet,*.snippets}                          call ReloadAllSnippets()
au BufReadPost * if line("'\"") > 0|if line("'\"") <= line("$")|exe("norm '\"")|else|exe "norm $"|endif|endif 

" airline powerline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:airline_poweline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
"set nocompatible
"set laststatus=2
let g:Powerline_symbols = 'fancy'
let Powerline_symbols='compatible'

"ultisnips complete 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:SuperTabDefaultCompletionType    = '<C-n>'
let g:SuperTabCrMapping                = 0
let g:UltiSnipsExpandTrigger           = '<tab>'
let g:UltiSnipsJumpForwardTrigger      = '<tab>'
let g:UltiSnipsJumpBackwardTrigger     = '<s-tab>'
let g:ycm_key_list_select_completion   = ['<C-j>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-k>', '<Up>']
let g:UltiSnipsEditSplit="vertical"
"ActivateAddons vim-snippets UltiSnips

" Doxygen
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:DoxygenToolkit_briefTag_funcName = "yes"
" for C++ style, change the '@' to '\'
let g:DoxygenToolkit_commentType = "C++"
let g:DoxygenToolkit_briefTag_pre = "@brief "
let g:DoxygenToolkit_templateParamTag_pre = "@tparam "
let g:DoxygenToolkit_paramTag_pre = "@param "
let g:DoxygenToolkit_returnTag = "@return "
let g:DoxygenToolkit_throwTag_pre = "@throw " " @exception is also valid
let g:DoxygenToolkit_fileTag = "@file "
let g:DoxygenToolkit_dateTag = "@date "
let g:DoxygenToolkit_authorTag = "@author "
let g:DoxygenToolkit_versionTag = "@version "
let g:DoxygenToolkit_blockTag = "@name "
let g:DoxygenToolkit_classTag = "@class "
let g:DoxygenToolkit_authorName = "volcanoh <huang.volcano@gmail.com>"
let g:DoxygenToolkit_blockHeader="--------------------------------------------------------------"
let g:DoxygenToolkit_blockFooter="--------------------------------------------------------------"
let g:DoxygenToolkit_licenseTag="GPL"
let g:doxygen_enhanced_color = 1
" C++ style
let g:DoxygenToolKit_startCommentBlock = "/// "
let g:DoxygenToolKit_interCommentBlock = "/// "

"creat doxgen comment
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <leader>dd :Dox<CR>
map <leader>da :DoxAuthor<CR>
map <leader>dl :DoxLic<cr>
let g:load_doxygen_syntax = 1
" end----------------------------------------------------------------------------------}}}

" delimitMate mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let delimitMate_matchpairs = "(:),[:],{:},<:>"
au FileType cpp let b:delimitMate_matchpairs = "(:),[:],{:}"
au FileType vimrc b:delimitMate_matchpairs = "(:),[:],{:}"
setlocal cindent cino=j1,(0,ws,Ws " c++11 indent
" end ----------------------------------------------------------------------------------}}}

" mappings for latex-box plugin
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
map <silent> <Leader>ls :silent !/Applications/Skim.app/Contents/SharedSupport/displayline
      \ <C-R>=line('.')<CR> "<C-R>=LatexBox_GetOutputFile()<CR>" "%:p" <CR>
autocmd filetype tex nnoremap F10 :!latexmk -pdf % 
let g:Tex_DefaultTargetFormat='pdf'
let g:Tex_CompileRule_pdf = 'pdflatex --synctex=-1 -src-specials -interaction=nonstopmode $*'
" end----------------------------------------------------------------------------------}}}

" color theme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set background=dark
set t_Co=256
let g:rehash256 = 1
"let g:solarized_termcolors=256
let g:molokai_original = 1
"colorscheme solarized
colorscheme molokai
let g:Powerline_colorscheme='solarized256'

" indexer
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" #############indexer##############
" 设置插件 indexer 调用 ctags 的参数
" " 默认 --c++-kinds=+p+l，重新设置为 --c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v
" " 默认 --fields=+iaS 不满足 YCM 要求，需改为 --fields=+iaSl
let g:indexer_ctagsCommandLineOptions="--c++-kinds=+p+l+x+c+d+e+f+g+m+n+s+t+u+v --fields=+iaSl --extra=+q"

" NERDtrss
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
"map <C-n> :NERDTreeToggle<CR>
"
" ctags
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
:set tags+=./tags
" 正向遍历同名标签
nmap <Leader>tn :tnext<CR>  
" 反向遍历同名标签
nmap <Leader>tp :tprevious<CR>

" YouCompleteme
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ycm_server_use_vim_stdout = 1
let g:ycm_confirm_extra_conf = 0
"let g:ycm_server_log_level = 'debug'
"let g:ycm_extra_conf_globlist = ['~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py']
"let g:ycm_global_ycm_extra_conf = '~/.vim/bundlesYouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '~/.dotfiles/vim/ycm_extra_conf.py'
let g:ycm_warning_symbol = '⚠'
let g:ycm_error_symbol = '✗'
let g:ycm_key_list_select_completion=[] "// 不使用tab
let g:ycm_key_list_previous_completion=[]
nnoremap <leader>jd :tab split<CR>:exec("YcmCompleter GoTo ")<CR>

" ctag
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" open ctag in tab/vertical split
map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <leader><C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
" open ctag in tab/vertical split
map <leader><C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
map <C-\> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>


" ctrlpfunky
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <Leader>fu :CtrlPFunky<Cr>
" narrow the list down with a word under cursor
nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
let g:ctrlp_funky_syntax_highlight = 1

" ctrlp
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ctrlp_map = '<leader>p'
let g:ctrlp_cmd = 'CtrlP'
nnoremap <C-p> :CtrlP<CR>
map <leader>f :CtrlPMRU<CR>
let g:ctrlp_custom_ignore = {
      \ 'dir':  '\v[\/]\.(git|hg|svn|rvm)$',
      \ 'file': '\v\.(exe|so|dll|zip|tar|tar.gz|pyc)$',
      \ }
let g:ctrlp_working_path_mode=0
let g:ctrlp_match_window_bottom=1
let g:ctrlp_max_height=15
let g:ctrlp_match_window_reversed=0
let g:ctrlp_mruf_max=500
let g:ctrlp_follow_symlinks=1

